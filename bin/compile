#!/bin/bash

set -e
set -o pipefail

unset GIT_DIR

VENDOR_URL="https://heroku-buildpack-ruby.s3.amazonaws.com"
BUNDLER_VERSION="1.5.2"

# BUILDPACK_REVISION is used to clear the bundle when something about how we manage
# the bundle changes.
#
# Revisions:
#
#   1: Implied as part of initial release
#   2: Change in `bundle install` environment to help nokogiri know to not compile
#      its own libxml and libxslt
#      ref https://github.com/heroku/heroku-buildpack-ruby/pull/124
#   3: Undo cleaning of `ext` directories because gems such as oj expect `ext` to
#      be usable as part of the require path.
#
BUILDPACK_REVISION="3"

BUILD_DIR="$1"
CACHE_DIR="$2"

say() {
    echo "-----> $*"
}

warn() {
    echo >&2 " !     $*"
}

error() {
    warn "$*"
    exit 1
}

indent() {
    sed -u 's/^/       /'
}

unpack_url() {
    url="$1"
    path="$2"

    mkdir -p "$path"

    if ! curl --fail --retry 3 --silent -o - "$url" | tar -C "$path" -zxf -; then
        error "Fetching and unpacking \"$url\" to \"$path\" failed."
    fi
}

cache_load() {
    if [ -e "$CACHE_DIR/$1" ]; then
        mkdir -p "$1"
        cp -a "$CACHE_DIR/$1/." "$1"
    fi
}

cache_store() {
    if [ -e "$1" ]; then
        rm -rf "$CACHE_DIR/$1"
        mkdir -p "$CACHE_DIR/$1"
        cp -a "$1/." "$CACHE_DIR/$1"
    fi
}

mkdir -p "$BUILD_DIR"
mkdir -p "$CACHE_DIR"
cd "$BUILD_DIR"

if [ ! -e Gemfile.lock ]; then
    error "No Gemfile.lock. Check it into your repository."
fi

if [ -e vendor/bundle ]; then
    warn "Don't check your vendor/bundle directory into your repository."
    rm -rf vendor/bundle
fi

say "Using bundler-$BUNDLER_VERSION"
bundler_tmp="$(mktemp -d bundler.XXXXXXXX)"
unpack_url "$VENDOR_URL/bundler-$BUNDLER_VERSION.tgz" "$bundler_tmp"
bundle_platform_ruby="$(GEM_PATH="$bundler_tmp" "$bundler_tmp/gems/bundler-$BUNDLER_VERSION/bin/bundle_ruby")"
if echo "$bundle_platform_ruby" | egrep -q '^No ruby'; then
    ruby_version="ruby-1.9.3"
else
    ruby_version="$(echo -n $bundle_platform_ruby | tr -s '[[:space:]]' '-')"
fi

say "Using $ruby_version"
unpack_url "$VENDOR_URL/$ruby_version.tgz" "vendor/$ruby_version"
ruby_exe="$(find vendor/$ruby_version -name ruby -type f)"
bundle_base="$("$ruby_exe" -e "require 'rbconfig';puts \"vendor/bundle/#{RUBY_ENGINE}/#{RbConfig::CONFIG['ruby_version']}\"")"
mkdir -p .profile.d
cat > .profile.d/ruby.sh <<EOF
export GEM_PATH="\$HOME/$bundle_base:\$GEM_PATH"
export LANG=\${LANG:-en_US.UTF-8}
export PATH="\$HOME/$bundle_base/bin:\$HOME/vendor/bundle/bin:\$HOME/vendor/$ruby_version/bin:\$PATH"
export RACK_ENV=\${RACK_ENV:-production}
EOF
export GEM_PATH="$BUILD_DIR/$bundle_base"
export PATH="$BUILD_DIR/bin:$BUILD_DIR/$bundle_base/bin:$BUILD_DIR/vendor/$ruby_version/bin:$PATH"

say "Installing dependencies"
cache_load .bundle
cache_load vendor

if [ ! -e vendor/buildpack/ruby_v ]; then
    first_push=1
    # Could be cruft from changing from the official buildpack
    rm -rf vendor/buildpack
    rm -rf vendor/bundle
else
    first_push=0
fi

mkdir -p vendor/buildpack

# See if the ruby version has changed, clear the bundle if so
"$ruby_exe" -v > vendor/buildpack/ruby_v.new
if [ "$first_push" -ne 1 ] && ! cmp --quiet vendor/buildpack/ruby_v{,.new}; then
    echo "ruby version change detected, clearing cached bundle" | indent
    echo "old: $(< vendor/buildpack/ruby_v)" | indent
    echo "new: $(< vendor/buildpack/ruby_v.new)" | indent
    rm -rf vendor/bundle
fi
mv vendor/buildpack/ruby_v{.new,}

# See if BUILDPACK_REVISION has changed, clear the bundle if so
echo "$BUILDPACK_REVISION" > vendor/buildpack/revision.new
if [ "$first_push" -ne 1 ] && ! cmp --quiet vendor/buildpack/revision{,.new}; then
    if [ ! -e vendor/buildpack/revision ]; then
        # Implied if not first push
        echo 1 > vendor/buildpack/revision
    fi
    echo "buildpack revision change detected, clearing cached bundle" | indent
    echo "old: $(< vendor/buildpack/revision)" | indent
    echo "new: $(< vendor/buildpack/revision.new)" | indent
    rm -rf vendor/bundle
fi
mv vendor/buildpack/revision{.new,}

mkdir -p "$bundle_base"
rm -rf "$bundle_base/gems/bundler-$BUNDLER_VERSION"
cp -a "$bundler_tmp/." "$bundle_base"
rm -rf "$bundle_base/bundler-$BUNDLER_VERSION.gem"
NOKOGIRI_USE_SYSTEM_LIBRARIES=true \
    bundle "_${BUNDLER_VERSION}_" install --deployment --jobs 4 --without development:test --path vendor/bundle --clean | indent
rm -rf "$bundle_base/doc"
rm -rf "$bundle_base/cache"
if [ -d "$bundle_base/bundler/gems" ]; then
    find "$bundle_base/bundler/gems" -type d -name .git -print0 | xargs -0 rm -rf
fi

cache_store .bundle
cache_store vendor/buildpack
cache_store vendor/bundle

rm -rf "$bundler_tmp"

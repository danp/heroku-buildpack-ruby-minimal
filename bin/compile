#!/bin/bash

set -e
set -o pipefail

unset GIT_DIR

VENDOR_URL="https://d3nlvu62nhllo4.cloudfront.net"
BUNDLER_VERSION="1.3.2"

BUILD_DIR="$1"
CACHE_DIR="$2"

say() {
    echo "-----> $*"
}

warn() {
    echo >&2 " !     $*"
}

error() {
    warn "$*"
    exit 1
}

indent() {
    sed -u 's/^/       /'
}

unpack_url() {
    url="$1"
    path="$2"

    mkdir -p "$path"

    if ! curl --fail --retry 3 --silent -o - "$url" | tar -C "$path" -zxf -; then
        error "Fetching and unpacking \"$url\" to \"$path\" failed."
    fi
}

cache_load() {
    if [ -e "$CACHE_DIR/$1" ]; then
        mkdir -p "$1"
        cp -a "$CACHE_DIR/$1/." "$1"
    fi
}

cache_store() {
    if [ -e "$1" ]; then
        rm -rf "$CACHE_DIR/$1"
        mkdir -p "$CACHE_DIR/$1"
        cp -a "$1/." "$CACHE_DIR/$1"
    fi
}

mkdir -p "$BUILD_DIR"
mkdir -p "$CACHE_DIR"
cd "$BUILD_DIR"

if [ ! -e Gemfile.lock ]; then
    error "No Gemfile.lock. Check it into your repository."
fi

if [ -e vendor/bundle ]; then
    warn "Don't check your vendor/bundle directory into your repository."
    rm -rf vendor/bundle
fi

say "Using bundler-$BUNDLER_VERSION"
bundler_tmp="$(mktemp -d bundler.XXXXXXXX)"
unpack_url "$VENDOR_URL/bundler-$BUNDLER_VERSION.tgz" "$bundler_tmp"
bundle_platform_ruby="$(GEM_PATH="$bundler_tmp" "$bundler_tmp/gems/bundler-$BUNDLER_VERSION/bin/bundle_ruby")"
if echo "$bundle_platform_ruby" | egrep -q '^No ruby'; then
    ruby_version="ruby-1.9.3"
else
    ruby_version="$(echo -n $bundle_platform_ruby | tr -s '[[:space:]]' '-')"
fi

say "Using $ruby_version"
unpack_url "$VENDOR_URL/$ruby_version.tgz" "vendor/$ruby_version"
ruby_exe="$(find vendor/$ruby_version -name ruby -type f)"
bundle_base="$("$ruby_exe" -e "require 'rbconfig';puts \"vendor/bundle/#{RUBY_ENGINE}/#{RbConfig::CONFIG['ruby_version']}\"")"
mkdir -p .profile.d
cat > .profile.d/ruby.sh <<EOF
export GEM_PATH="\$HOME/$bundle_base:\$GEM_PATH"
export LANG=\${LANG:-en_US.UTF-8}
export PATH="\$HOME/$bundle_base/bin:\$HOME/vendor/$ruby_version/bin:\$PATH"
export RACK_ENV=\${RACK_ENV:-production}
EOF
export GEM_PATH="$BUILD_DIR/$bundle_base:$GEM_PATH"
export PATH="$BUILD_DIR/bin:$BUILD_DIR/$bundle_base/bin:$BUILD_DIR/vendor/$ruby_version/bin:$PATH"

say "Installing dependencies"
cache_load .bundle
cache_load vendor
mkdir -p vendor/buildpack
"$ruby_exe" -v > vendor/buildpack/ruby_v.new
if [ -e vendor/buildpack/ruby_v ] && ! cmp --quiet vendor/buildpack/ruby_v{,.new}; then
    echo "ruby version change detected, clearing cached bundle" | indent
    echo "old: $(< vendor/buildpack/ruby_v)" | indent
    echo "new: $(< vendor/buildpack/ruby_v.new)" | indent
    rm -rf vendor/bundle
fi
mv vendor/buildpack/ruby_v{.new,}
mkdir -p "$bundle_base"
rm -rf "$bundle_base/gems/bundler-$BUNDLER_VERSION"
cp -a "$bundler_tmp/." "$bundle_base"
rm -rf "$bundle_base/bundler-$BUNDLER_VERSION.gem"
bundle install --without development:test --path vendor/bundle | indent
rm -rf "$bundle_base/doc"
rm -rf "$bundle_base/cache"
if [ -d "$bundle_base/bundler/gems" ]; then
    find "$bundle_base/bundler/gems" -type d -name .git -print0 | xargs -0 rm -rf
fi

cache_store .bundle
cache_store vendor/buildpack
cache_store vendor/bundle

rm -rf "$bundler_tmp"
